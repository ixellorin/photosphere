{"version":3,"sources":["logo.svg","Vis.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Vis","handleResize","width","mount","clientWidth","height","clientHeight","renderer","setSize","camera","aspect","updateProjectionMatrix","start","frameId","requestAnimationFrame","animate","stop","cancelAnimationFrame","cube","rotation","x","y","renderScene","window","render","scene","this","THREE","antialias","geometry","material","color","position","z","add","setClearColor","addEventListener","appendChild","domElement","removeEventListener","removeChild","className","ref","Component","App","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4JAAAA,EAAOC,QAAU,IAA0B,kC,wJCgF5BC,E,2MA1CbC,aAAe,WACb,IAAMC,EAAQ,EAAKC,MAAMC,YACnBC,EAAS,EAAKF,MAAMG,aAC1B,EAAKC,SAASC,QAAQN,EAAOG,GAC7B,EAAKI,OAAOC,OAASR,EAAQG,EAC7B,EAAKI,OAAOE,0B,EAGdC,MAAQ,WACD,EAAKC,UACR,EAAKA,QAAUC,sBAAsB,EAAKC,W,EAI9CC,KAAO,WACLC,qBAAqB,EAAKJ,U,EAG5BE,QAAU,WACR,EAAKG,KAAKC,SAASC,GAAK,IACxB,EAAKF,KAAKC,SAASE,GAAK,IAExB,EAAKC,cACL,EAAKT,QAAUU,OAAOT,sBAAsB,EAAKC,U,EAGnDO,YAAc,WACZ,EAAKf,SAASiB,OAAO,EAAKC,MAAO,EAAKhB,S,mFA5DtC,IAAMP,EAAQwB,KAAKvB,MAAMC,YACnBC,EAASqB,KAAKvB,MAAMG,aAEpBmB,EAAQ,IAAIE,IACZlB,EAAS,IAAIkB,IAAwB,GAAIzB,EAAQG,EAAQ,GAAK,KAC9DE,EAAW,IAAIoB,IAAoB,CAAEC,WAAW,IAChDC,EAAW,IAAIF,IAAkB,EAAG,EAAG,GACvCG,EAAW,IAAIH,IAAwB,CAAEI,MAAO,WAChDb,EAAO,IAAIS,IAAWE,EAAUC,GAEtCrB,EAAOuB,SAASC,EAAI,EACpBR,EAAMS,IAAIhB,GACVX,EAAS4B,cAAc,WACvB5B,EAASC,QAAQN,EAAOG,GAExBqB,KAAKD,MAAQA,EACbC,KAAKjB,OAASA,EACdiB,KAAKnB,SAAWA,EAChBmB,KAAKI,SAAWA,EAChBJ,KAAKR,KAAOA,EAEZK,OAAOa,iBAAiB,SAAUV,KAAKzB,cAEvCyB,KAAKvB,MAAMkC,YAAYX,KAAKnB,SAAS+B,YACrCZ,KAAKd,U,6CAILW,OAAOgB,oBAAoB,UAC3Bb,KAAKV,OACLU,KAAKvB,MAAMqC,YAAYd,KAAKnB,SAAS+B,c,+BAiC7B,IAAD,OACP,OACE,yBACEG,UAAU,MACVC,IAAK,SAAAvC,GACH,EAAKA,MAAQA,S,GAtELwC,aCUHC,MARf,WACE,OACE,yBAAKH,UAAU,OACb,kBAAC,EAAD,QCIcI,QACW,cAA7BtB,OAAOuB,SAASC,UAEe,UAA7BxB,OAAOuB,SAASC,UAEhBxB,OAAOuB,SAASC,SAASC,MACvB,2DCZNC,IAASzB,OAAO,kBAAC,EAAD,MAAS0B,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d8809f4b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { Component } from 'react'\r\nimport * as THREE from 'three'\r\n\r\nclass Vis extends Component {\r\n  componentDidMount() {\r\n    const width = this.mount.clientWidth\r\n    const height = this.mount.clientHeight\r\n\r\n    const scene = new THREE.Scene()\r\n    const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000)\r\n    const renderer = new THREE.WebGLRenderer({ antialias: true })\r\n    const geometry = new THREE.BoxGeometry(1, 1, 1)\r\n    const material = new THREE.MeshBasicMaterial({ color: 0xff00ff })\r\n    const cube = new THREE.Mesh(geometry, material)\r\n\r\n    camera.position.z = 4\r\n    scene.add(cube)\r\n    renderer.setClearColor('#000000')\r\n    renderer.setSize(width, height)\r\n\r\n    this.scene = scene\r\n    this.camera = camera\r\n    this.renderer = renderer\r\n    this.material = material\r\n    this.cube = cube\r\n\r\n    window.addEventListener('resize', this.handleResize)\r\n\r\n    this.mount.appendChild(this.renderer.domElement)\r\n    this.start()\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize')\r\n    this.stop()\r\n    this.mount.removeChild(this.renderer.domElement)\r\n  }\r\n\r\n  handleResize = () => {\r\n    const width = this.mount.clientWidth\r\n    const height = this.mount.clientHeight\r\n    this.renderer.setSize(width, height)\r\n    this.camera.aspect = width / height\r\n    this.camera.updateProjectionMatrix()\r\n  }\r\n\r\n  start = () => {\r\n    if (!this.frameId) {\r\n      this.frameId = requestAnimationFrame(this.animate)\r\n    }\r\n  }\r\n\r\n  stop = () => {\r\n    cancelAnimationFrame(this.frameId)\r\n  }\r\n\r\n  animate = () => {\r\n    this.cube.rotation.x += 0.01\r\n    this.cube.rotation.y += 0.01\r\n\r\n    this.renderScene()\r\n    this.frameId = window.requestAnimationFrame(this.animate)\r\n  }\r\n\r\n  renderScene = () => {\r\n    this.renderer.render(this.scene, this.camera)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        className=\"vis\"\r\n        ref={mount => {\r\n          this.mount = mount\r\n        }}\r\n      />\r\n    )\r\n  }\r\n}\r\n\r\nexport default Vis\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Vis from './Vis'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Vis/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}